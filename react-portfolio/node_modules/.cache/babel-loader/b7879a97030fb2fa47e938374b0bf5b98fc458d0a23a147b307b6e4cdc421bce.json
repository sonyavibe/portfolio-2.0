{"ast":null,"code":"import _defineProperty from \"D:/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/portfolio v2/react-portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nexport default function Grid(_ref) {\n  var swiper = _ref.swiper,\n    extendParams = _ref.extendParams;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  var slidesNumberEvenToRows;\n  var slidesPerRow;\n  var numFullColumns;\n  var initSlides = function initSlides(slidesLength) {\n    var slidesPerView = swiper.params.slidesPerView;\n    var _swiper$params$grid = swiper.params.grid,\n      rows = _swiper$params$grid.rows,\n      fill = _swiper$params$grid.fill;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  var updateSlide = function updateSlide(i, slide, slidesLength, getDirectionLabel) {\n    var _swiper$params = swiper.params,\n      slidesPerGroup = _swiper$params.slidesPerGroup,\n      spaceBetween = _swiper$params.spaceBetween;\n    var _swiper$params$grid2 = swiper.params.grid,\n      rows = _swiper$params$grid2.rows,\n      fill = _swiper$params$grid2.fill; // Set slides order\n\n    var newSlideOrderIndex;\n    var column;\n    var row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      var groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      var slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      var columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        '-webkit-order': newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && \"\".concat(spaceBetween, \"px\") : '');\n  };\n  var updateWrapperSize = function updateWrapperSize(slideSize, snapGrid, getDirectionLabel) {\n    var _swiper$params2 = swiper.params,\n      spaceBetween = _swiper$params2.spaceBetween,\n      centeredSlides = _swiper$params2.centeredSlides,\n      roundLengths = _swiper$params2.roundLengths;\n    var rows = swiper.params.grid.rows;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css(_defineProperty({}, getDirectionLabel('width'), \"\".concat(swiper.virtualSize + spaceBetween, \"px\")));\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      var newSlidesGrid = [];\n      for (var i = 0; i < snapGrid.length; i += 1) {\n        var slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.push.apply(snapGrid, newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides: initSlides,\n    updateSlide: updateSlide,\n    updateWrapperSize: updateWrapperSize\n  };\n}","map":{"version":3,"names":["Grid","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","initSlides","slidesLength","slidesPerView","params","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","spaceBetween","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","css","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","$wrapperEl","splice","length","newSlidesGrid","slidesGridItem","push"],"sources":["D:/Рабочий стол/portfolio v2/node_modules/swiper/modules/grid/grid.js"],"sourcesContent":["export default function Grid({\r\n  swiper,\r\n  extendParams\r\n}) {\r\n  extendParams({\r\n    grid: {\r\n      rows: 1,\r\n      fill: 'column'\r\n    }\r\n  });\r\n  let slidesNumberEvenToRows;\r\n  let slidesPerRow;\r\n  let numFullColumns;\r\n\r\n  const initSlides = slidesLength => {\r\n    const {\r\n      slidesPerView\r\n    } = swiper.params;\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid;\r\n    slidesPerRow = slidesNumberEvenToRows / rows;\r\n    numFullColumns = Math.floor(slidesLength / rows);\r\n\r\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\r\n      slidesNumberEvenToRows = slidesLength;\r\n    } else {\r\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\r\n    }\r\n\r\n    if (slidesPerView !== 'auto' && fill === 'row') {\r\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\r\n    }\r\n  };\r\n\r\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\r\n    const {\r\n      slidesPerGroup,\r\n      spaceBetween\r\n    } = swiper.params;\r\n    const {\r\n      rows,\r\n      fill\r\n    } = swiper.params.grid; // Set slides order\r\n\r\n    let newSlideOrderIndex;\r\n    let column;\r\n    let row;\r\n\r\n    if (fill === 'row' && slidesPerGroup > 1) {\r\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\r\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\r\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\r\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\r\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\r\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\r\n      slide.css({\r\n        '-webkit-order': newSlideOrderIndex,\r\n        order: newSlideOrderIndex\r\n      });\r\n    } else if (fill === 'column') {\r\n      column = Math.floor(i / rows);\r\n      row = i - column * rows;\r\n\r\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\r\n        row += 1;\r\n\r\n        if (row >= rows) {\r\n          row = 0;\r\n          column += 1;\r\n        }\r\n      }\r\n    } else {\r\n      row = Math.floor(i / slidesPerRow);\r\n      column = i - row * slidesPerRow;\r\n    }\r\n\r\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');\r\n  };\r\n\r\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\r\n    const {\r\n      spaceBetween,\r\n      centeredSlides,\r\n      roundLengths\r\n    } = swiper.params;\r\n    const {\r\n      rows\r\n    } = swiper.params.grid;\r\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\r\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\r\n    swiper.$wrapperEl.css({\r\n      [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`\r\n    });\r\n\r\n    if (centeredSlides) {\r\n      snapGrid.splice(0, snapGrid.length);\r\n      const newSlidesGrid = [];\r\n\r\n      for (let i = 0; i < snapGrid.length; i += 1) {\r\n        let slidesGridItem = snapGrid[i];\r\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\r\n      }\r\n\r\n      snapGrid.push(...newSlidesGrid);\r\n    }\r\n  };\r\n\r\n  swiper.grid = {\r\n    initSlides,\r\n    updateSlide,\r\n    updateWrapperSize\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
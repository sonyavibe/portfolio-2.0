{"ast":null,"code":"export default function slideToLoop() {\n  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;\n  var runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var internal = arguments.length > 3 ? arguments[3] : undefined;\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    var indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    var isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\".concat(index, \"] given.\"));\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n    index = indexAsNumber;\n  }\n  var swiper = this;\n  var newIndex = index;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","map":{"version":3,"names":["slideToLoop","index","speed","params","runCallbacks","internal","indexAsNumber","parseInt","isValidNumber","isFinite","Error","swiper","newIndex","loop","loopedSlides","slideTo"],"sources":["D:/Рабочий стол/portfolio v2/node_modules/swiper/core/slide/slideToLoop.js"],"sourcesContent":["export default function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {\r\n  if (typeof index === 'string') {\r\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\r\n    const indexAsNumber = parseInt(index, 10);\r\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\r\n\r\n    const isValidNumber = isFinite(indexAsNumber);\r\n\r\n    if (!isValidNumber) {\r\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\r\n    } // Knowing that the converted `index` is a valid number,\r\n    // we can update the original argument's value.\r\n\r\n\r\n    index = indexAsNumber;\r\n  }\r\n\r\n  const swiper = this;\r\n  let newIndex = index;\r\n\r\n  if (swiper.params.loop) {\r\n    newIndex += swiper.loopedSlides;\r\n  }\r\n\r\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\r\n}"],"mappings":"AAAA,eAAe,SAASA,WAAW,GAAsE;EAAA,IAArEC,KAAK,uEAAG,CAAC;EAAA,IAAEC,KAAK,uEAAG,IAAI,CAACC,MAAM,CAACD,KAAK;EAAA,IAAEE,YAAY,uEAAG,IAAI;EAAA,IAAEC,QAAQ;EACrG,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;IAC7B;AACJ;AACA;AACA;IACI,IAAMK,aAAa,GAAGC,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;IACzC;AACJ;AACA;AACA;AACA;;IAEI,IAAMO,aAAa,GAAGC,QAAQ,CAACH,aAAa,CAAC;IAE7C,IAAI,CAACE,aAAa,EAAE;MAClB,MAAM,IAAIE,KAAK,8EAAuET,KAAK,cAAW;IACxG,CAAC,CAAC;IACF;;IAGAA,KAAK,GAAGK,aAAa;EACvB;EAEA,IAAMK,MAAM,GAAG,IAAI;EACnB,IAAIC,QAAQ,GAAGX,KAAK;EAEpB,IAAIU,MAAM,CAACR,MAAM,CAACU,IAAI,EAAE;IACtBD,QAAQ,IAAID,MAAM,CAACG,YAAY;EACjC;EAEA,OAAOH,MAAM,CAACI,OAAO,CAACH,QAAQ,EAAEV,KAAK,EAAEE,YAAY,EAAEC,QAAQ,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}